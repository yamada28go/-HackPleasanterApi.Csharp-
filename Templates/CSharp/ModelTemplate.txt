/**
 *
 * [注意]
 *  自動生成されたコードです。
 *  変更時には十分注意して変更してください。
 *
 *  [生成コマンド]
 *  https://github.com/yamada28go/HackPleasanterApiCli
 *
 *  [生成元テンプレートファイル]
 *  https://github.com/yamada28go/HackPleasanterApi.Csharp
 *
 *  [動作に必用なライブラリ]
 *  https://www.nuget.org/packages/HackPleasanterApi.Csharp
 *
 */


using HackPleasanterApi.Client.Api.Interface;
using HackPleasanterApi.Client.Api.Models.ItemModel;
using HackPleasanterApi.Client.Api.Models.ItemModel.Hash;
using System;
using System.Collections.Generic;
using System.Text;


namespace CsharpSamples.Generated.Models
{
@{
//コード生成に必要な一時変数をまとめて定義する

  // クラス名
  string TargetClassName = Model.TemplateFilesConfig.HeadPrefix + Model.SiteDefinition.SiteVariableName + Model.TemplateFilesConfig.EndPrefix;
  // ユーザー拡張要素が定義されたクラス名
  string ExtensionElementsClassName = TargetClassName + "ExtensionElements"; 

}
    /// <summary>
    /// @Raw(Model.SiteDefinition.Title) DTOクラス
    /// </summary>
    public class @Raw(TargetClassName) : DTOBase<@Raw(TargetClassName).@Raw(ExtensionElementsClassName)>
    {

        public @Raw(TargetClassName) ():base(new ItemRawData())
        {
            this.ExtensionElements = new @Raw(ExtensionElementsClassName) (this.rawData);
            this.BasicItemData = new BasicItemData(this.rawData);
        }


        public @Raw(TargetClassName) (ItemRawData rawData):base(rawData)
        {
            this.ExtensionElements = new @Raw(ExtensionElementsClassName) (this.rawData);
            this.BasicItemData = new BasicItemData(this.rawData);
        }

        /// <summary>
        /// 個別の拡張要素
        /// </summary>
        public class @Raw(ExtensionElementsClassName) : ExtensionElementsBase
        {
            public @Raw(ExtensionElementsClassName) (ItemRawData _rawData)  : base(_rawData) {
            }


            #region 自動生成

            #region Class区分

            @* ClassHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.ClassHash) {

                <text>

               /// <summary>
               /// @Raw(item.LabelText)
                /// </summary>
                public string? @Raw(item.VariableName)
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.ClassHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {

                            if (obj.ClassHash is null)
                            {
                                obj.ClassHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.ClassHash();
                            }

                            obj.ClassHash.@(item.ColumnName) = value;

                            return ;
                        
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Num区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.NumHash) {

                <text>


               /// <summary>
               /// @Raw(item.LabelText)
               /// </summary>
                public decimal? @Raw(item.VariableName)
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.NumHash is null)
                            {
                                obj.NumHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.NumHash();
                            }

                            obj.NumHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }

                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.NumHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }

                }
                </text>

            }

            #endregion

            #region Date区分

            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DateHash) {

                <text>

               /// <summary>
               /// @Raw(item.LabelText)
               /// </summary>
                public DateTime? @Raw(item.VariableName)
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.DateHash is null)
                            {
                                obj.DateHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.DateHash();
                            }

                            obj.DateHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }

                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.DateHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }

                }
                </text>

            }

            #endregion

            #region Description区分

            @* DescriptionHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.DescriptionHash) {

                <text>

               /// <summary>
               /// @Raw(item.LabelText)
               /// </summary>
                public string? @Raw(item.VariableName)
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.DescriptionHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.DescriptionHash is null)
                            {
                                obj.DescriptionHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.DescriptionHash();
                            }

                            obj.DescriptionHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion

            #region Check区分

            @* CheckHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.CheckHash) {

                <text>

               /// <summary>
               /// @Raw(item.LabelText)
               /// </summary>
                public bool? @Raw(item.VariableName)
                {
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {

                            if (obj.CheckHash is null)
                            {
                                obj.CheckHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.CheckHash();
                            }

                            obj.CheckHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }

                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.CheckHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }

                }
                </text>

            }

            #endregion


            #region Attachments区分

            @* AttachmentsHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.AttachmentsHash) {

                <text>

               /// <summary>
               /// @Raw(item.LabelText)
               /// </summary>
                public List<Attachments>? @Raw(item.VariableName)
                {
                    get
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            return obj?.AttachmentsHash?.@(item.ColumnName);
                        }
                        throw new ApplicationException("参照エラー");

                    }
                    set
                    {
                        if (rawData.TryGetTarget(out var obj))
                        {
                            if (obj.AttachmentsHash is null)
                            {
                                obj.AttachmentsHash = new HackPleasanterApi.Client.Api.Models.ItemModel.Hash.AttachmentsHash();
                            }

                            obj.AttachmentsHash.@(item.ColumnName) = value;

                            return ;
                        }

                        throw new ApplicationException("参照エラー");

                    }
                }
                </text>

            }

            #endregion


#endregion
        }

    }
}
